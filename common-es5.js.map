{"version":3,"sources":["webpack:///src/app/services/http/blog.service.ts","webpack:///src/app/services/middle/mblog.service.ts"],"names":["BlogService","http","url","event","type","Sent","ResponseHeader","DownloadProgress","loaded","Math","round","Response","body","request","reportProgress","providedIn","MblogService","httpBlog","emitBlogs","sBlog","subscribe","_api","HttpEventResponse","cacheBlogs","emit"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAMaA,W;AAiBX,2BAAqBC,IAArB,EAAqC;AAAA;;AAAhB,aAAAA,IAAA,GAAAA,IAAA,CAAgB,CAhBrC;;AACA,aAAAC,GAAA,GAAM,kCAAN;AAe2C;;;;0CAbzBC,K,EAAO;AACvB,kBAASA,KAAK,CAACC,IAAf;AACE,iBAAK,mEAAcC,IAAnB;AACA;;AACA,iBAAK,mEAAcC,cAAnB;AACA;;AACA,iBAAK,mEAAcC,gBAAnB;AACA,kBAAMC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAYP,KAAK,CAACK,MAAN,GAAe,IAA3B,CAAf;AACA;;AACA,iBAAK,mEAAcG,QAAnB;AACA,qBAAOR,KAAK,CAACS,IAAb;AATF;AAWD;;;gCAGO;AACN,cAAMC,OAAO,GAAG,IAAI,gEAAJ,CAAgB,KAAhB,EAAuB,KAAKX,GAAL,GAAW,uBAAlC,EAA2D;AAAEY,0BAAc,EAAE;AAAlB,WAA3D,CAAhB;AACA,iBAAO,KAAKb,IAAL,CAAUY,OAAV,CAAkBA,OAAlB,CAAP;AACD;;;;;;;uBAtBUb,W,EAAW,uH;AAAA,K;;;aAAXA,W;AAAW,eAAXA,WAAW,K;AAAA,kBAFV;;;;;sEAEDA,W,EAAW;cAHvB,wDAGuB;eAHZ;AACVe,oBAAU,EAAE;AADF,S;AAGY,Q;;;;;;;;;;;;;;;;;;;;;;ACNxB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAOaC,Y;AAGX,4BAAqBC,QAArB,EAA0C;AAAA;;AAArB,aAAAA,QAAA,GAAAA,QAAA;AAFrB,aAAAC,SAAA,GAAY,IAAI,0DAAJ,EAAZ;AAEgD;;;;+BACzC;AAAA;;AACL;AACA;AACA;AACA;AACA;AACA,eAAKD,QAAL,CAAcE,KAAd,GAAsBC,SAAtB,CAAgC,UAACjB,KAAD,EAA2B;AACzD,gBAAIkB,IAAI,GAAG,KAAI,CAACJ,QAAL,CAAcK,iBAAd,CAAgCnB,KAAhC,CAAX;;AACA,gBAAIA,KAAK,CAACC,IAAN,KAAe,CAAnB,EAAqB;AACnB;AACA,mBAAI,CAACmB,UAAL,GAAkBF,IAAlB;;AACA,mBAAI,CAACH,SAAL,CAAeM,IAAf,CAAoBH,IAApB;AACD;AACF,WAPD;AAQD;;;;;;;uBAlBUL,Y,EAAY,sH;AAAA,K;;;aAAZA,Y;AAAY,eAAZA,YAAY,K;AAAA,kBAFX;;;;;sEAEDA,Y,EAAY;cAHxB,wDAGwB;eAHb;AACVD,oBAAU,EAAE;AADF,S;AAGa,Q","file":"common-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpRequest, HttpEventType } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BlogService {\n  // url = 'http://localhost:4200/';\n  url = 'https://offline-pixel.github.io/';\n\n  HttpEventResponse(event) {\n    switch ( event.type ) {\n      case HttpEventType.Sent:\n      break;\n      case HttpEventType.ResponseHeader:\n      break;\n      case HttpEventType.DownloadProgress:\n      const loaded = Math.round( event.loaded / 1024 );\n      break;\n      case HttpEventType.Response:\n      return event.body;\n    }\n  }\n  constructor( private http: HttpClient ) { }\n\n  sBlog() {\n    const request = new HttpRequest('GET', this.url + 'assets/json/blog.json', { reportProgress: true });\n    return this.http.request(request);\n  }\n\n}\n","import { EventEmitter, Injectable } from '@angular/core';\nimport { HttpEvent } from '@angular/common/http';\nimport { BlogService } from '../http/blog.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MblogService {\n  emitBlogs = new EventEmitter<any>();\n  cacheBlogs: any;\n  constructor( private httpBlog: BlogService ) { }\n  blog() {\n    // if (this.cacheBlogs){\n    //   console.log('2');\n    //   this.emitBlogs.emit(this.cacheBlogs);\n    //   return;\n    // }\n    this.httpBlog.sBlog().subscribe((event: HttpEvent<any>) => {\n      let _api = this.httpBlog.HttpEventResponse(event);\n      if (event.type === 4){\n        // console.log('1');\n        this.cacheBlogs = _api;\n        this.emitBlogs.emit(_api);\n      }\n    });\n  }\n}\n"]}